<?php
namespace Rql\Generated;

// @@protoc_insertion_point(namespace:Rql.Generated.Query)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: q2.proto
 *
 * You send one of:
 * * A [START] query with a [Term] to evaluate and a unique-per-connection token.
 * * A [CONTINUE] query with the same token as a [START] query that returned
 *   [SUCCESS_PARTIAL] in its [Response].
 * * A [STOP] query with the same token as a [START] query that you want to stop.
 * * A [NOREPLY_WAIT] query with a unique per-connection token. The server answers
 *   with a [WAIT_COMPLETE] [Response].
 *
 * -*- magic methods -*-
 *
 * @method Rql\Generated\Query\QueryType getType()
 * @method void setType(Rql\Generated\Query\QueryType $value)
 * @method Rql\Generated\Term getQuery()
 * @method void setQuery(Rql\Generated\Term $value)
 * @method string getToken()
 * @method void setToken(\string $value)
 * @method bool getOBSOLETENoreply()
 * @method void setOBSOLETENoreply(bool $value)
 * @method bool getAcceptsRJson()
 * @method void setAcceptsRJson(bool $value)
 * @method array getGlobalOptargs()
 * @method void appendGlobalOptargs(Rql\Generated\Query\AssocPair $value)
 */
class Query extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:Rql.Generated.Query)
  
  /**
   * @var Rql\Generated\Query\QueryType $type
   * @tag 1
   * @label optional
   * @type \ProtocolBuffers::TYPE_ENUM
   * @see Rql\Generated\Query\QueryType
   **/
  protected $type;
  
  /**
   * A [Term] is how we represent the operations we want a query to perform.
   *
   * @var Rql\Generated\Term $query
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   *
   * only present when [type] = [START]
   *
   **/
  protected $query;
  
  /**
   * @var string $token
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $token;
  
  /**
   * This flag is ignored on the server.  `noreply` should be added
   * to `global_optargs` instead (the key "noreply" should map to
   * either true or false).
   *
   * @var bool $OBSOLETE_noreply
   * @tag 4
   * @label optional
   * @type \ProtocolBuffers::TYPE_BOOL
   **/
  protected $OBSOLETE_noreply;
  
  /**
   * If this is set to [true], then [Datum] values will sometimes be
   * of [DatumType] [R_JSON] (see below).  This can provide enormous
   * speedups in languages with poor protobuf libraries.
   *
   * @var bool $accepts_r_json
   * @tag 5
   * @label optional
   * @type \ProtocolBuffers::TYPE_BOOL
   **/
  protected $accepts_r_json;
  
  /**
   * @var array $global_optargs
   * @tag 6
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   * @see Rql\Generated\Query\AssocPair
   **/
  protected $global_optargs;
  
  
  // @@protoc_insertion_point(properties_scope:Rql.Generated.Query)

  // @@protoc_insertion_point(class_scope:Rql.Generated.Query)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_ENUM,
        "name"     => "type",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "query",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\Rql\Generated\Term',
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "token",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_BOOL,
        "name"     => "OBSOLETE_noreply",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => false,
      )));
      $desc->addField(5, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_BOOL,
        "name"     => "accepts_r_json",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => false,
      )));
      $desc->addField(6, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "global_optargs",
        "required" => false,
        "optional" => false,
        "repeated" => true,
        "packable" => false,
        "default"  => null,
        "message" => '\Rql\Generated\Query\AssocPair',
      )));
      // @@protoc_insertion_point(builder_scope:Rql.Generated.Query)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
