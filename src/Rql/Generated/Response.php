<?php
namespace Rql\Generated;

// @@protoc_insertion_point(namespace:Rql.Generated.Response)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: q2.proto
 *
 * You get back a response with the same [token] as your query.
 *
 * -*- magic methods -*-
 *
 * @method Rql\Generated\Response\ResponseType getType()
 * @method void setType(Rql\Generated\Response\ResponseType $value)
 * @method string getToken()
 * @method void setToken(\string $value)
 * @method array getResponse()
 * @method void appendResponse(Rql\Generated\Datum $value)
 * @method Rql\Generated\Backtrace getBacktrace()
 * @method void setBacktrace(Rql\Generated\Backtrace $value)
 * @method Rql\Generated\Datum getProfile()
 * @method void setProfile(Rql\Generated\Datum $value)
 */
class Response extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:Rql.Generated.Response)
  
  /**
   * @var Rql\Generated\Response\ResponseType $type
   * @tag 1
   * @label optional
   * @type \ProtocolBuffers::TYPE_ENUM
   * @see Rql\Generated\Response\ResponseType
   **/
  protected $type;
  
  /**
   * @var string $token
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   *
   * Indicates what [Query] this response corresponds to.
   *
   **/
  protected $token;
  
  /**
   * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
   * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
   * error message (of type [R_STR]) in all other cases.
   *
   * @var array $response
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   * @see Rql\Generated\Datum
   **/
  protected $response;
  
  /**
   * If [type] is [CLIENT_ERROR], [TYPE_ERROR], or [RUNTIME_ERROR], then a
   * backtrace will be provided.  The backtrace says where in the query the
   * error occured.  Ideally this information will be presented to the user as
   * a pretty-printed version of their query with the erroneous section
   * underlined.  A backtrace is a series of 0 or more [Frame]s, each of which
   * specifies either the index of a positional argument or the name of an
   * optional argument.  (Those words will make more sense if you look at the
   * [Term] message below.)
   *
   * @var Rql\Generated\Backtrace $backtrace
   * @tag 4
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   *
   * Contains n [Frame]s when you get back an error.
   *
   **/
  protected $backtrace;
  
  /**
   * If the [global_optargs] in the [Query] that this [Response] is a
   * response to contains a key "profile" which maps to a static value of
   * true then [profile] will contain a [Datum] which provides profiling
   * information about the execution of the query. This field should be
   * returned to the user along with the result that would normally be
   * returned (a datum or a cursor). In official drivers this is accomplished
   * by putting them inside of an object with "value" mapping to the return
   * value and "profile" mapping to the profile object.
   *
   * @var Rql\Generated\Datum $profile
   * @tag 5
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $profile;
  
  
  // @@protoc_insertion_point(properties_scope:Rql.Generated.Response)

  // @@protoc_insertion_point(class_scope:Rql.Generated.Response)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_ENUM,
        "name"     => "type",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "token",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "response",
        "required" => false,
        "optional" => false,
        "repeated" => true,
        "packable" => false,
        "default"  => null,
        "message" => '\Rql\Generated\Datum',
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "backtrace",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\Rql\Generated\Backtrace',
      )));
      $desc->addField(5, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "profile",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\Rql\Generated\Datum',
      )));
      // @@protoc_insertion_point(builder_scope:Rql.Generated.Response)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
